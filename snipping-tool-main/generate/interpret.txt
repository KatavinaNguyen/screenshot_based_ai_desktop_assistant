- RESPONSE TYPE LOGIC -

[1] CORRECTION TYPE
-> Definition: Fix grammar, spelling, unclear phrasing, or debug faulty code.
-> Indication: Only triggered when Correction Mode is enabled — prevents misclassification of OCR noise.
-> Process: "Return a corrected version of the text. If unclear, resolve meaning in the most logical and helpful way."
-> Examples: 
    :1: print("hi)  >>  print("hi")
    :2: Turn in the assignment after class, but do not wait until class ends.  
    >>  Do you mean: during class or immediately after class?
    
[2] DIAGNOSTIC TYPE
-> Definition: Provide a direct answer to a question, problem, or issue.
-> Indication: Clear question, calculation, or request to find/solve something.
-> Process: “Answer directly with minimal words. If unclear or error-related, give brief user steps."
-> Examples: 
    :1: What did green light represent for Gatsby?  >>  Unattainable dream; symbol of Gatsby’s hope for Daisy and the future.
    :2: 2x + 5 = 11  >>  x = 3
    :3: If today is Monday, what day will it be in 365 days?  >>  Tuesday — 365 days advances the weekday by one.
    :4: 404 Not Found  >>  1. Check URL for typos 2. Ensure page exists 3. Verify server routes
    :5: 10 weeknight date ideas  >>  1. Cook dinner together 2. Movie night at home 3. Sunset walk ... 10. Try a new recipe

[3] SUMMARY TYPE 
-> Definition: Condense long or overcomplicated information into a clearer, minimal form — without expanding or explaining further.
-> Indication: Long blocks of text, overly wordy instructions, recipes, descriptions, or documentation without a direct question.
-> Process: "Rephrase in simple terms to preserve intent, completely cut ambiguity, pay attention to numbers, bullets when useful - max_tokens=50"
-> Examples: 
    :1: *a coworker's very long email where you can't even tell what they're asking for*
    >>  Tom is going on vacation soon. You have to complete report by Thursday and lead a meeting Friday. 
    :2: *Textbook paragraph about supernovas*
    >>  A supernova is a massive star explosion that outshines galaxies and creates heavy elements.
    :3: *ikea cabinet instruction manual*  
    >>  Align parts, insert screws, tighten frame, attach doors.
    :4: *chocolate cake recipe*  
    >>  1 3/4 c flour, 3/4 c cocoa, 1 3/4 c sugar, 2 tsp baking soda, 1 tsp baking powder, 1 tsp salt
        2 tsp espresso (opt), 1/2 c oil, 2 eggs, 2 tsp vanilla, 1 c buttermilk, 1 c hot coffee

[4] EXPLANATION TYPE
-> Definition: Expand and clarify a single concept, term, or idea — often with an example.
-> Indication: One-word input or concept lacking context, and no other types apply.
-> Process: "Briefly explain the concept with a short example when helpful."
-> Examples:
    :: quote ....  >>

[5] INCONCLUSIVE TYPE
-> Definition: No meaningful classification can be made from the input.
-> Indication: OCR returned nothing; text is gibberish; unclear intent; broken structure; no recognizable content.
-> Process: "If none of the above types, say 'x'."
-> Examples: 
    :1: doifhnefn  >>  'meme' >> meme image


.......... scrap pile ............
User written text defined by conversational speech or needing something? correction 
:: scrap :: [Task] + [Deadline] + [Why]; 
[What it is] + [When/How it happens] + [Why it matters] with 10 words or less for each section 
Also include the type you used in parentheses at the end. (e.g., [Type: Correction]) 
-- the queries are so small and insignificant that they won't care enough

>> organized by first-check fallback :: indicators, triggers
these prompts won't have memory to ask for followups >> has to work within a stateless api prompt
cannot process full-on images with no text at all 
Prioritize the info with relation to user / relevant
always opt to give direct, concise answer without explanation 
should always assume that it is task content, and that there is some kind of task the user is trying to perform
fixing it > explaining it - until there's nothing to fix 























def generate_prompt(ocr_text: str) -> str:
    return f"""Text:
{ocr_text.strip()}

Instruction:
Determine what type of response is appropriate (Correction, Answer, Condense, Explanation, Inconclusive). Then follow that type's process:
- Correction: Fix text or code errors.
- Answer: Answer directly; if error-related, give user steps.
- Condense: Simplify or summarize without expanding.
- Explanation: Explain a concept with a brief example.
- Inconclusive: Respond with 'Could not determine intent. Please rephrase or try again.'
"""


Instruction: Identify type (Correction, Answer, Condense, Explanation, Inconclusive) and follow its rule:
- Correction: Fix it.
- Answer: Solve it. If unclear, give steps.
- Condense: Shorten clearly.
- Explanation: Explain briefly with example.
- Inconclusive: Say 'Could not determine intent.'



if correction_mode_on:
    final_prompt = f"Text:\n{ocr_text}\n\nInstruction:\nFix grammar, spelling, or code errors."
else:
    final_prompt = f"""Text:
{ocr_text.strip()}

Instruction:
Determine the appropriate type (Answer, Condense, Explanation, Inconclusive). Then follow that type's rule:
..."""


instruction: Return a corrected version of the text. If unclear, resolve meaning most applicable and logically helpful to me. max_tokens = 25
instruction: Return a concise, corrected, relevant text to me. max_tokens = 25
instruction: Return a concise, corrected, relevant text to me, with relevance briefly explained. max_tokens = 25
instruction: Return corrected info (if error) or only relevant to me. max_tokens = 25
instruction: Return info corrected (if needed) or only relevant to me. max_tokens = 25
instruction: Return info corrected (if needed) or only relevant to me, explaining relevance. max_tokens = 25
instruction: Return info corrected (if needed) or only key points and relevant events to me. max_tokens = 25

instruction: Return info corrected (if needed) or only harshly cut to the point with info/events relevant to me. max_tokens = 25
Tom’s leaving soon—wrap up doc review before Thursday. Draft may help. End-of-week meeting needs a lead.

instruction: Return info corrected (if needed) or cut subtlety, rewrite as action items simply put. max_tokens = 25

instruction: Return info corrected (if needed) else cut all subtlety, harshly tell me what i need to do simple terms. max_tokens = 25
Wrap up the doc summary by Thursday. Lead the Friday meeting if no one else does.

instruction: only 1 of 2 options: 1. Return only text corrected (if needed) else 2. cut all subtlety, harshly tell me what i need to do simple terms. max_tokens = 25
does not work if want summary  but has single typo ! need 2 things for ocr



You are a classifier and response engine. Based on the following input text,
apply one of these types: Correction, Diagnostic, Summary, Explanation, or
Inconclusive. Then output the appropriate response.

TYPES:
[0] Correction: ...

[1] Diagnostic: ...
[2] Explanation:
[3]

INPUT:
<Text goes here>




You are a classifier and response engine.




***
change ui to do corner screen bottom-to-top with correction mode: on indicator




'''
I feel that there is some in-defense measures that need to be preempted first, since
it can be undervalued for someone undertaking this kind of project to think that the
quality of the prompts and optimizing cost efficiency are irrelevant things. But the
quality of the prompts are your only real means of control over the quality of the answers
and the user will care about the quality of the answer despite being so cut and dry
with the primary goal of being quick - when you think about it like if it only takes .5
seconds to load a bad answer, the user technically saves .5 seconds opening up their web
browser themselves and didn't have to spend time in reading your lackluster response.
And even though it might be hard to exceed the cost of $5 in one month, being closer
to free is going to be better than being closer to paying for an entire nother
subscription. I just hope this would be enough incentive to put a good amount of time
into learning more about this yourself; disclaimer that it's fun until it's not.
'''
